package pack;
/*	указывает пакет "pack", в котором находится файл класса
Пакет (package) — это некий контейнер, который используется для того, чтобы изолировать имена классов.
Например, вы можете создать класс List, заключить его в пакет и не думать после этого о возможных конфликтах, 
которые могли бы возникнуть если бы кто-нибудь еще создал класс с именем List.
 */

public class Rasch {
	/*	(Public)модификатор доступа, который позволяет программисту управлять видимостью любого метода и любой переменной. 
    В данном случае модификатор доступа public означает, что класс Rasch виден и доступен любому классу.
	В этой строке использовано зарезервированное слово class. 
	Оно говорит транслятору, что мы собираемся описать новый класс Rasch.
	описываем Rasch как класс, доступный другим классам (public)
	*/
	static double oklad, dni,rab_dni, kol_det, do_18, prem, doh2y,dni_bol, doh1y, dni_otp, bez_nal,vt_det,vt, nal_baza, nalog,premi,zarpl,sr_dn_bol,bol, bol_1, kof,k,sr_dn_otp,otp;
	static int box_3000_1,box_500_1;

	/*************** Зарплата **********************/
	public static void RacZarDanPer() {
		/*  Модификатор доступа public означает, что метод RacZarDanPer() виден и доступен любому классу.
	    static означает, что не нужно создавать экземпляр(копию) объекта Rasch в памяти, чтобы использовать этот метод.
	    void означает, что метод RacZarDanPer() не возвращает данных в программу, которая его вызвала.
	    Метод RacZarDanPer с пустыми скобками, это означает, что метод не имеет аргументов(параметров)
	    */
		oklad = Integer.parseInt(Zarpl.Text_oklad.getText());
		dni = Integer.parseInt(Zarpl.Text_dni.getText());
		rab_dni = Integer.parseInt(Zarpl.Text_rab_dni.getText());
		kol_det = Integer.parseInt(Zarpl.Text_kol_det.getText());
	    do_18 = Integer.parseInt(Zarpl.Text_do_18.getText());
	    prem = Integer.parseInt(Zarpl.Text_prem.getText());
		if (Zarpl.Box_3000.isSelected()){ box_3000_1=1; } else box_3000_1=0;
	    if (Zarpl.Box_500.isSelected()){ box_500_1=1; } else box_500_1=0;
	    }

	public static void Itog_zarpl() {/*  Модификатор доступа public означает, что метод Itog() виден и доступен любому классу.
	    static означает, что не нужно создавать экземпляр(копию) объекта Rasch в памяти, чтобы использовать этот метод.
	    void означает, что метод Itog() не возвращает данных в программу, которая его вызвала.
	    Метод Itog с пустыми скобками, это означает, что метод не имеет аргументов(параметров)
	    */	
		//НАЧИСЛЕНО  (кол-во часов*почас.оплата)
	    bez_nal=oklad/rab_dni*dni;
	    
	    //ВЫЧЕТЫ
	    //стандартный вычет на детей. на первого ребенка - 1400, второго - 1400, третьего и больше - 3000 руб.
	    if (do_18==0){vt_det=0;//если детей до 18 лет нет - то стандартный вычет на детей=0
	    } else if ((kol_det-do_18)>=2){vt_det=3000*do_18;
	    } else if ((kol_det-do_18)==1){vt_det=1400+3000*(do_18-1);
	    } else if ((kol_det-do_18)==0){
	    	if (do_18==1){vt_det=1400;
	    	} else {vt_det=1400*2+3000*(do_18-2);}}
	    
	    vt=(3000*box_3000_1)+(500*box_500_1)+vt_det;//box_3000_1 - стандартный вычет 3000 (для лиц получивших инвал.),box_500_1- стандартный вычет 500 руб (участников войны, пострадавших от радиации) 
	    
	    //НАЛОГООБЛАГАЕМАЯ БАЗА (оклад- вычеты)
	    nal_baza= bez_nal - vt;
	    if (nal_baza<0) {nal_baza=0;}
	    
	    //Налог на доходы физ.лиц 13%   ((зарпл.начисл.-вычеты)*0.13) или налогообл.база*0,13
	    nalog= nal_baza * 0.13;
	    if (nalog<0) {nalog=0;} //налог не может быть меньше 0
	    
	    //ПРЕМИЯ((зарплата начислено-налог)*размер премии в процентах/100)
	    premi=(bez_nal-nalog) * prem/100;
	    
	    //ЗАРПЛАТА К ВЫДАЧЕ (зарпл.начисл.-налоги+премия)
	    zarpl=bez_nal-nalog+premi;
	    
	    //форматированный вывод
	    String bez_nal_1 = String.format("%.2f", bez_nal);
	    String nal_baza_1 = String.format("%.2f", nal_baza);
	    String nalog_1 = String.format("%.2f", nalog);
	    String premi_1 = String.format("%.2f", premi);
	    String zarpl_1 = String.format("%.2f", zarpl);	
	    /* статический метод String.format()используется для создания форматированной строки без ее вывода
		   "%.2f" - будет выводится 2 знака после запятой
		    */
	    // записать результат в текстовую метку  в окне "Расчет зарплаты"
	    Interface_Zarpl.Label_bez_nal.setText(bez_nal_1);
	    Interface_Zarpl.Label_nal_baza.setText(nal_baza_1);
	    Interface_Zarpl.Label_nalog.setText(nalog_1);
	    Interface_Zarpl.Label_premi.setText(premi_1);
	    Interface_Zarpl.Label_zarpl.setText(zarpl_1);
	    
	}
	
	/*************** Больничный **********************/
	public static void RacBolDanPer() {/*  Модификатор доступа public означает, что метод RacZarDanPer() виден и доступен любому классу.
	    static означает, что не нужно создавать экземпляр(копию) объекта Rasch в памяти, чтобы использовать этот метод.
	    void означает, что метод RacZarDanPer() не возвращает данных в программу, которая его вызвала.
	    Метод RacZarDanPer с пустыми скобками, это означает, что метод не имеет аргументов(параметров)
	    */
		doh2y = Integer.parseInt(Bolnic.Text_2years.getText());//из панели Bolnic считываем данные которые ввел пользователь в поле Text_2years
		dni_bol = Integer.parseInt(Bolnic.Text_dni_bol.getText()); 
		k=1;
		if (Bolnic.q==0) {k=0;kof=1;} //q-переменная которая отвечает за выпадающий список.q=0 - менее 6 месяцев, q=1- до 5 лет, q=2-от5до8лет, q=3-более 8. 
		else if (Bolnic.q==1) {kof=0.6;} 
		else if (Bolnic.q==2) {kof=0.8;} 
		else {kof=1;} 
		}

	public static void Itog_bolnic() {/*  Модификатор доступа public означает, что метод Itog() виден и доступен любому классу.
	    static означает, что не нужно создавать экземпляр(копию) объекта Rasch в памяти, чтобы использовать этот метод.
	    void означает, что метод Itog() не возвращает данных в программу, которая его вызвала.
	    Метод Itog с пустыми скобками, это означает, что метод не имеет аргументов(параметров)
	    */	
		
	    //БОЛЬНИЧНЫЙ (среднедневной заработок(Доход за 2 года/730,кол-во дней в 2 годах)* число дней по болезни*%оплаты больничного листа)
	    //СРЕДНИЙ ДНЕВНОЙ ЗАРАБОТОК (доход за 2 года/730)
	    if ((doh2y<(5965*24))||(k==0)){doh2y=5965*24;} //5965-МРОТ по Башкирии за месяц(минимальный размер оплаты труда), 24 месяца - 2 года, Если k=0-сотрудник работает меньше 6 мес., его доход считается по МРОТ. Если доход сотрудника за 2 года меньше чем за 2 года по МРОТ, то доход считается по МРОТ.
	    sr_dn_bol=doh2y/730;
	    
	    //ОПЛАТА 1 дня больничного
	    bol_1=sr_dn_bol*kof;// оплата 1 дня больничного с учетом страхового стажа.q=0 - менее 6 месяцев, q=1- до 5 лет, q=2-от5до8лет, q=3-более 8. 
	    
	    //СУММА БОЛЬНИЧНОГО (оплата1дня больничн* дни болезни)
	    bol=bol_1* dni_bol;
	    
	    //форматированный вывод
	    String sr_dn_bol_1 = String.format("%.2f", sr_dn_bol);
	    String bol_1_1 = String.format("%.2f", bol_1);
	    String bol_2 = String.format("%.2f", bol);
	    /* статический метод String.format()используется для создания форматированной строки без ее вывода
		   "%.2f" - будет выводится 2 знака после запятой
		    */
	    // записать результат в текстовую метку в окне "Расчет больничного"
	    Interface_Bolnic.Label_sr_dn_bol.setText(sr_dn_bol_1);
	    Interface_Bolnic.Label_1_bol.setText(bol_1_1);
	    Interface_Bolnic.Label_bol.setText(bol_2);
	}	
	
	/*************** Отпускные **********************/
	
	public static void RacOtpDanPer() { /*  Модификатор доступа public означает, что метод RacZarDanPer() виден и доступен любому классу.
	    static означает, что не нужно создавать экземпляр(копию) объекта Rasch в памяти, чтобы использовать этот метод.
	    void означает, что метод RacZarDanPer() не возвращает данных в программу, которая его вызвала.
	    Метод RacZarDanPer с пустыми скобками, это означает, что метод не имеет аргументов(параметров)
	    */   
		doh1y = Integer.parseInt(Otp.Text_1year.getText());
		dni_otp = Integer.parseInt(Otp.Text_dni_otp.getText()); 
		}
	
	public static void Itog_otp() {/*  Модификатор доступа public означает, что метод Itog() виден и доступен любому классу.
	    static означает, что не нужно создавать экземпляр(копию) объекта Rasch в памяти, чтобы использовать этот метод.
	    void означает, что метод Itog() не возвращает данных в программу, которая его вызвала.
	    Метод Itog с пустыми скобками, это означает, что метод не имеет аргументов(параметров)
	    */	

	    //ОТПУСК(зарплата за год/12 месяцев /29.3(среднее число дней в месяце)* кол-во дней отпуска)
		//СРЕДНИЙ ДНЕВНОЙ ЗАРАБОТОК (доход за 1 года/12 мес./29,3)
	    if ((doh1y<(5965*12))||(k==0)){doh1y=5965*12;} //5965-МРОТ по Башкирии за месяц(минимальный размер оплаты труда), 24 месяца - 2 года, Если k=0-сотрудник работает меньше 6 мес., его доход считается по МРОТ. Если доход сотрудника за 2 года меньше чем за 2 года по МРОТ, то доход считается по МРОТ.
	    sr_dn_otp=doh1y/12/29.3;

	    //СУММА ОТПУСКНЫХ (среднедн.зар.* дни отпуска)
	    otp=sr_dn_otp* dni_otp;
	    
	    //форматированный вывод
	    String sr_dn_otp_1 = String.format("%.2f", sr_dn_otp);
	    String otp_1 = String.format("%.2f", otp);
	    /* статический метод String.format()используется для создания форматированной строки без ее вывода
		   "%.2f" - будет выводится 2 знака после запятой
		    */
	    // записать результат в текстовую метку в окне "Расчет отпускных"
	    Interface_Otp.Label_sr_dn_otp.setText(sr_dn_otp_1);
	    Interface_Otp.Label_otp.setText(otp_1);
    
	}    
    
}    

